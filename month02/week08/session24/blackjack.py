import sqlite3
import random 
import os
import time

# DB_FILE = # TODO
def get_db_connection():
    conn.row_factory = sqlite3.Row
    return conn
def setup_database():
    """`players` —Ö“Ø—Å–Ω—ç–≥—Ç –±–∞–π—Ö–≥“Ø–π –±–æ–ª “Ø“Ø—Å–≥—ç–Ω—ç."""
    conn = get_db_connection()
    conn.commit()
    conn.close()
def get_or_create_player(name, starting_chips=1000):
    if player_data:
        print(f"–≠—Ä–≥—ç–Ω —Ç–∞–≤—Ç–∞–π –º–æ—Ä–∏–ª, {name}!")
        chips = player_data['chips']
    else:
        print(f"–®–∏–Ω—ç —Ç–æ–≥–ª–æ–≥—á {name}, —Ç–∞–≤—Ç–∞–π –º–æ—Ä–∏–ª–Ω–æ —É—É!")
        conn.commit()
        chips = starting_chips
    conn.close()
    return chips
def update_chips(name, chips):
    conn.commit()
    conn.close()
def create_deck():
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K',
    'A']
    suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
    deck = [{'rank': rank, 'suit': suit} for rank in ranks for suit in
    suits]
    random.shuffle(deck)
    return deck
def get_card_value(card):
    rank = card['rank']
    if rank in ['J', 'Q', 'K']:
        return 10
    if rank == 'A':
        return 11
    return int(rank)
def calculate_hand_value(hand):
    """–ì–∞—Ä—Ç –±–∞–π–≥–∞–∞ —Ö”©–∑—Ä“Ø“Ø–¥–∏–π–Ω –Ω–∏–π–ª–±—ç—Ä –æ–Ω–æ–æ–≥ —Ç–æ–æ—Ü–æ–æ–ª–Ω–æ (A-–≥ –∑”©–≤
    —Ç–æ–æ—Ü–æ–æ–ª–Ω–æ)."""
    value = sum(get_card_value(card) for card in hand)
    num_aces = sum(1 for card in hand if card['rank'] == 'A')
    # –•—ç—Ä—ç–≤ –Ω–∏–π–ª–±—ç—Ä 21-—ç—ç—Å —Ö—ç—Ç—ç—Ä—Å—ç–Ω –±–æ–ª A-–≥ 1 –≥—ç–∂ —Ç–æ–æ—Ü–Ω–æ
    while value > 21 and num_aces > 0:
        value -= 10
        num_aces -= 1
    return value
def display_cards(player_hand, dealer_hand, hide_dealer_card=False):

    clear_screen()
    player_cards = " ".join([f"[{card['rank']}{card['suit']}]" for card in
    player_hand])
    player_value = calculate_hand_value(player_hand)
    print(f"–¢–∞–Ω—ã –º–æ–¥ ({player_value}): {player_cards}")
    if hide_dealer_card:
        dealer_cards = f"[{dealer_hand[0]['rank']}{dealer_hand[0]
        ['suit']}] [?]"
        print(f"–î–∏–ª–µ—Ä–∏–π–Ω –º–æ–¥: {dealer_cards}")
    else:
        dealer_cards = " ".join([f"[{card['rank']}{card['suit']}]" for
        card in dealer_hand])
        dealer_value = calculate_hand_value(dealer_hand)
        print(f"–î–∏–ª–µ—Ä–∏–π–Ω –º–æ–¥ ({dealer_value}): {dealer_cards}")

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def get_bet(max_bet):
    while True:
        try:
            bet = int(input(f"–ë–æ–æ—Ü–æ–æ–≥–æ–æ —Ç–∞–≤–∏–Ω–∞ —É—É (1 - {max_bet}): "))
            if 1 <= bet <= max_bet:
                return bet
            else:
                print("–ë–æ–æ—Ü–æ–æ–Ω—ã –¥“Ø–Ω –±—É—Ä—É—É –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
        except ValueError:
            print("–ó”©–≤—Ö”©–Ω —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É.")
def play_game():
    setup_database()
    clear_screen()
    print("‚ô† ‚ô• ‚ô¶ ‚ô£ Python SQLite Blackjack —Ç–æ–≥–ª–æ–æ–º–¥ —Ç–∞–≤—Ç–∞–π –º–æ—Ä–∏–ª–Ω–æ —É—É! ‚ô£ ‚ô¶ ‚ô• ‚ô†")
    player_name = input("–ù—ç—Ä—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É: ").strip()
    if not player_name:
        print("–¢–æ–≥–ª–æ—Ö—ã–Ω —Ç—É–ª–¥ –Ω—ç—Ä –æ—Ä—É—É–ª–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π. –ì–∞—Ä—á –±–∞–π–Ω–∞.")
        return
    chips = get_or_create_player(player_name)
    while True:
        if chips <= 0:
            print("–¢–∞–Ω—ã —á–∏–ø—Å –¥—É—É—Å–ª–∞–∞! –î–∞—Ä–∞–∞ –¥–∞—Ö–∏–Ω –º”©–Ω–≥”©—Ç—ç–π –±–æ–ª–æ–æ–¥ –∏—Ä—ç—ç—Ä—ç–π. üòâ ")
            break
        print(f"\n–¢–∞–Ω—ã –æ–¥–æ–æ–≥–∏–π–Ω “Ø–ª–¥—ç–≥–¥—ç–ª: {chips} —á–∏–ø—Å")
        bet = get_bet(chips)
        chips -= bet
        deck = create_deck()
        player_hand = [deck.pop(), deck.pop()]
        dealer_hand = [deck.pop(), deck.pop()]
        player_turn = True
        while player_turn:
            display_cards(player_hand, dealer_hand, hide_dealer_card=True)
            print(f"\n–¢–∞–Ω—ã –±–æ–æ—Ü–æ–æ: {bet} —á–∏–ø—Å")
            player_value = calculate_hand_value(player_hand)
            if player_value == 21:
                print("–ë–ª—ç–∫–∂—ç–∫! –¢–∞ —è–ª–ª–∞–∞!")
                player_turn = False
                continue
            action = input("(–î)–∞—Ö–∏–∞–¥ –∞–≤–∞—Ö —É—É, (–ó)–æ–≥—Å–æ—Ö —É—É? ").lower()
            if action.startswith('–¥'):
                player_hand.append(deck.pop())
                if calculate_hand_value(player_hand) > 21:
                    display_cards(player_hand, dealer_hand, hide_dealer_card=True)
                    print("\n–•—ç—Ç—ç—Ä–ª—ç—ç! –¢–∞ —ç–Ω—ç —É–¥–∞–∞ —è–ª–∞–≥–¥–ª–∞–∞.")
                    player_turn = False
            elif action.startswith('–∑'):
                player_turn = False
            else:
                print("–ë—É—Ä—É—É “Ø–π–ª–¥—ç–ª. '–î' —ç—Å–≤—ç–ª '–ó' “Ø—Å–≥–∏–π–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É.")
                time.sleep(1)
        player_value = calculate_hand_value(player_hand)
        if player_value <= 21:
            while calculate_hand_value(dealer_hand) < 17:
                dealer_hand.append(deck.pop())
                display_cards(player_hand, dealer_hand)
                time.sleep(1)
        display_cards(player_hand, dealer_hand)
        dealer_value = calculate_hand_value(dealer_hand)
        print("\n--- “Æ—Ä –î“Ø–Ω ---")
        if player_value > 21:
            print(f"–¢–∞ —Ö—ç—Ç—Ä“Ø“Ø–ª—Å—ç–Ω —Ç—É–ª {bet} —á–∏–ø—Å –∞–ª–¥–ª–∞–∞.")
        elif dealer_value > 21:
            print(f"–î–∏–ª–µ—Ä —Ö—ç—Ç—Ä“Ø“Ø–ª–ª—ç—ç! –¢–∞ {bet} —á–∏–ø—Å —Ö–æ–∂–ª–æ–æ!")
            chips += bet * 2
        elif player_value == 21 and len(player_hand) == 2:
            print(f"–ë–ª—ç–∫–∂—ç–∫! –¢–∞ {int(bet * 1.5)} —á–∏–ø—Å —Ö–æ–∂–ª–æ–æ!")
            chips += bet + int(bet * 1.5)
        elif player_value > dealer_value:
            print(f"–¢–∞ {bet} —á–∏–ø—Å —Ö–æ–∂–ª–æ–æ!")
            chips += bet * 2
        elif player_value < dealer_value:
            print(f"–î–∏–ª–µ—Ä —è–ª–ª–∞–∞. –¢–∞ {bet} —á–∏–ø—Å –∞–ª–¥–ª–∞–∞.")
        else:
            print("–¢—ç–Ω—Ü–ª—ç—ç! –¢–∞–Ω—ã –±–æ–æ—Ü–æ–æ –±—É—Ü–∞–∞–ª–∞–∞.")
            chips += bet
        update_chips(player_name, chips)
        print(f"–¢–∞–Ω—ã —à–∏–Ω—ç “Ø–ª–¥—ç–≥–¥—ç–ª: {chips} —á–∏–ø—Å")
        
        play_again = input("\n–î–∞—Ö–∏–Ω —Ç–æ–≥–ª–æ—Ö —É—É? (–¢/“Æ) ").lower()
        if not play_again.startswith('—Ç'):
            break
        print("–¢–æ–≥–ª–æ—Å–æ–Ω–¥ –±–∞—è—Ä–ª–∞–ª–∞–∞!")


if __name__ == "__main__":
    play_game()